# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Smarthome
_M_Smarthome = Ice.openModule('Smarthome')
__name__ = 'Smarthome'

if 'Mode' not in _M_Smarthome.__dict__:
    _M_Smarthome.Mode = Ice.createTempClass()
    class Mode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Mode.ON = Mode("ON", 0)
    Mode.STANDBY = Mode("STANDBY", 1)
    Mode._enumerators = { 0:Mode.ON, 1:Mode.STANDBY }

    _M_Smarthome._t_Mode = IcePy.defineEnum('::Smarthome::Mode', Mode, (), Mode._enumerators)

    _M_Smarthome.Mode = Mode
    del Mode

if 'DevicesIsInStandbyMode' not in _M_Smarthome.__dict__:
    _M_Smarthome.DevicesIsInStandbyMode = Ice.createTempClass()
    class DevicesIsInStandbyMode(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::DevicesIsInStandbyMode'

    _M_Smarthome._t_DevicesIsInStandbyMode = IcePy.defineException('::Smarthome::DevicesIsInStandbyMode', DevicesIsInStandbyMode, (), False, None, ())
    DevicesIsInStandbyMode._ice_type = _M_Smarthome._t_DevicesIsInStandbyMode

    _M_Smarthome.DevicesIsInStandbyMode = DevicesIsInStandbyMode
    del DevicesIsInStandbyMode

if 'InputTemperatureOutOfRange' not in _M_Smarthome.__dict__:
    _M_Smarthome.InputTemperatureOutOfRange = Ice.createTempClass()
    class InputTemperatureOutOfRange(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::InputTemperatureOutOfRange'

    _M_Smarthome._t_InputTemperatureOutOfRange = IcePy.defineException('::Smarthome::InputTemperatureOutOfRange', InputTemperatureOutOfRange, (), False, None, ())
    InputTemperatureOutOfRange._ice_type = _M_Smarthome._t_InputTemperatureOutOfRange

    _M_Smarthome.InputTemperatureOutOfRange = InputTemperatureOutOfRange
    del InputTemperatureOutOfRange

if 'ProductDoesNotExist' not in _M_Smarthome.__dict__:
    _M_Smarthome.ProductDoesNotExist = Ice.createTempClass()
    class ProductDoesNotExist(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::ProductDoesNotExist'

    _M_Smarthome._t_ProductDoesNotExist = IcePy.defineException('::Smarthome::ProductDoesNotExist', ProductDoesNotExist, (), False, None, ())
    ProductDoesNotExist._ice_type = _M_Smarthome._t_ProductDoesNotExist

    _M_Smarthome.ProductDoesNotExist = ProductDoesNotExist
    del ProductDoesNotExist

if 'InputSpeedOutOfRange' not in _M_Smarthome.__dict__:
    _M_Smarthome.InputSpeedOutOfRange = Ice.createTempClass()
    class InputSpeedOutOfRange(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::InputSpeedOutOfRange'

    _M_Smarthome._t_InputSpeedOutOfRange = IcePy.defineException('::Smarthome::InputSpeedOutOfRange', InputSpeedOutOfRange, (), False, None, ())
    InputSpeedOutOfRange._ice_type = _M_Smarthome._t_InputSpeedOutOfRange

    _M_Smarthome.InputSpeedOutOfRange = InputSpeedOutOfRange
    del InputSpeedOutOfRange

if 'BatteryLvlLow' not in _M_Smarthome.__dict__:
    _M_Smarthome.BatteryLvlLow = Ice.createTempClass()
    class BatteryLvlLow(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::BatteryLvlLow'

    _M_Smarthome._t_BatteryLvlLow = IcePy.defineException('::Smarthome::BatteryLvlLow', BatteryLvlLow, (), False, None, ())
    BatteryLvlLow._ice_type = _M_Smarthome._t_BatteryLvlLow

    _M_Smarthome.BatteryLvlLow = BatteryLvlLow
    del BatteryLvlLow

if 'InvalidDate' not in _M_Smarthome.__dict__:
    _M_Smarthome.InvalidDate = Ice.createTempClass()
    class InvalidDate(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::InvalidDate'

    _M_Smarthome._t_InvalidDate = IcePy.defineException('::Smarthome::InvalidDate', InvalidDate, (), False, None, ())
    InvalidDate._ice_type = _M_Smarthome._t_InvalidDate

    _M_Smarthome.InvalidDate = InvalidDate
    del InvalidDate

_M_Smarthome._t_Device = IcePy.defineValue('::Smarthome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getId(self, context=None):
            return _M_Smarthome.Device._op_getId.invoke(self, ((), context))

        def getIdAsync(self, context=None):
            return _M_Smarthome.Device._op_getId.invokeAsync(self, ((), context))

        def begin_getId(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Device._op_getId.begin(self, ((), _response, _ex, _sent, context))

        def end_getId(self, _r):
            return _M_Smarthome.Device._op_getId.end(self, _r)

        def setMode(self, mode, context=None):
            return _M_Smarthome.Device._op_setMode.invoke(self, ((mode, ), context))

        def setModeAsync(self, mode, context=None):
            return _M_Smarthome.Device._op_setMode.invokeAsync(self, ((mode, ), context))

        def begin_setMode(self, mode, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Device._op_setMode.begin(self, ((mode, ), _response, _ex, _sent, context))

        def end_setMode(self, _r):
            return _M_Smarthome.Device._op_setMode.end(self, _r)

        def getMode(self, context=None):
            return _M_Smarthome.Device._op_getMode.invoke(self, ((), context))

        def getModeAsync(self, context=None):
            return _M_Smarthome.Device._op_getMode.invokeAsync(self, ((), context))

        def begin_getMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Device._op_getMode.begin(self, ((), _response, _ex, _sent, context))

        def end_getMode(self, _r):
            return _M_Smarthome.Device._op_getMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.DevicePrx.ice_checkedCast(proxy, '::Smarthome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Device'
    _M_Smarthome._t_DevicePrx = IcePy.defineProxy('::Smarthome::Device', DevicePrx)

    _M_Smarthome.DevicePrx = DevicePrx
    del DevicePrx

    _M_Smarthome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device')

        def ice_id(self, current=None):
            return '::Smarthome::Device'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Device'

        def getId(self, current=None):
            raise NotImplementedError("servant method 'getId' not implemented")

        def setMode(self, mode, current=None):
            raise NotImplementedError("servant method 'setMode' not implemented")

        def getMode(self, current=None):
            raise NotImplementedError("servant method 'getMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_DeviceDisp)

        __repr__ = __str__

    _M_Smarthome._t_DeviceDisp = IcePy.defineClass('::Smarthome::Device', Device, (), None, ())
    Device._ice_type = _M_Smarthome._t_DeviceDisp

    Device._op_getId = IcePy.Operation('getId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_setMode = IcePy.Operation('setMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Smarthome._t_Mode, False, 0),), (), None, ())
    Device._op_getMode = IcePy.Operation('getMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Smarthome._t_Mode, False, 0), ())

    _M_Smarthome.Device = Device
    del Device

if 'Unit' not in _M_Smarthome.__dict__:
    _M_Smarthome.Unit = Ice.createTempClass()
    class Unit(Ice.EnumBase):
        """
        FRIDGE
        """

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Unit.GRAM = Unit("GRAM", 0)
    Unit.KILOGRAM = Unit("KILOGRAM", 1)
    Unit.LITRE = Unit("LITRE", 2)
    Unit.MILLILITRE = Unit("MILLILITRE", 3)
    Unit._enumerators = { 0:Unit.GRAM, 1:Unit.KILOGRAM, 2:Unit.LITRE, 3:Unit.MILLILITRE }

    _M_Smarthome._t_Unit = IcePy.defineEnum('::Smarthome::Unit', Unit, (), Unit._enumerators)

    _M_Smarthome.Unit = Unit
    del Unit

if 'Date' not in _M_Smarthome.__dict__:
    _M_Smarthome.Date = Ice.createTempClass()
    class Date(object):
        def __init__(self, day=0, month=0, year=0):
            self.day = day
            self.month = month
            self.year = year

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.day)
            _h = 5 * _h + Ice.getHash(self.month)
            _h = 5 * _h + Ice.getHash(self.year)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Smarthome.Date):
                return NotImplemented
            else:
                if self.day is None or other.day is None:
                    if self.day != other.day:
                        return (-1 if self.day is None else 1)
                else:
                    if self.day < other.day:
                        return -1
                    elif self.day > other.day:
                        return 1
                if self.month is None or other.month is None:
                    if self.month != other.month:
                        return (-1 if self.month is None else 1)
                else:
                    if self.month < other.month:
                        return -1
                    elif self.month > other.month:
                        return 1
                if self.year is None or other.year is None:
                    if self.year != other.year:
                        return (-1 if self.year is None else 1)
                else:
                    if self.year < other.year:
                        return -1
                    elif self.year > other.year:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_Date)

        __repr__ = __str__

    _M_Smarthome._t_Date = IcePy.defineStruct('::Smarthome::Date', Date, (), (
        ('day', (), IcePy._t_int),
        ('month', (), IcePy._t_int),
        ('year', (), IcePy._t_int)
    ))

    _M_Smarthome.Date = Date
    del Date

if 'Product' not in _M_Smarthome.__dict__:
    _M_Smarthome.Product = Ice.createTempClass()
    class Product(object):
        def __init__(self, id=0, name='', amount=0, unit=_M_Smarthome.Unit.GRAM, expirationDate=Ice._struct_marker):
            self.id = id
            self.name = name
            self.amount = amount
            self.unit = unit
            if expirationDate is Ice._struct_marker:
                self.expirationDate = _M_Smarthome.Date()
            else:
                self.expirationDate = expirationDate

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.amount)
            _h = 5 * _h + Ice.getHash(self.unit)
            _h = 5 * _h + Ice.getHash(self.expirationDate)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Smarthome.Product):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.amount is None or other.amount is None:
                    if self.amount != other.amount:
                        return (-1 if self.amount is None else 1)
                else:
                    if self.amount < other.amount:
                        return -1
                    elif self.amount > other.amount:
                        return 1
                if self.unit is None or other.unit is None:
                    if self.unit != other.unit:
                        return (-1 if self.unit is None else 1)
                else:
                    if self.unit < other.unit:
                        return -1
                    elif self.unit > other.unit:
                        return 1
                if self.expirationDate is None or other.expirationDate is None:
                    if self.expirationDate != other.expirationDate:
                        return (-1 if self.expirationDate is None else 1)
                else:
                    if self.expirationDate < other.expirationDate:
                        return -1
                    elif self.expirationDate > other.expirationDate:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_Product)

        __repr__ = __str__

    _M_Smarthome._t_Product = IcePy.defineStruct('::Smarthome::Product', Product, (), (
        ('id', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('amount', (), IcePy._t_int),
        ('unit', (), _M_Smarthome._t_Unit),
        ('expirationDate', (), _M_Smarthome._t_Date)
    ))

    _M_Smarthome.Product = Product
    del Product

if 'TemperatureRange' not in _M_Smarthome.__dict__:
    _M_Smarthome.TemperatureRange = Ice.createTempClass()
    class TemperatureRange(object):
        def __init__(self, min=0.0, max=0.0):
            self.min = min
            self.max = max

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Smarthome.TemperatureRange):
                return NotImplemented
            else:
                if self.min != other.min:
                    return False
                if self.max != other.max:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_TemperatureRange)

        __repr__ = __str__

    _M_Smarthome._t_TemperatureRange = IcePy.defineStruct('::Smarthome::TemperatureRange', TemperatureRange, (), (
        ('min', (), IcePy._t_double),
        ('max', (), IcePy._t_double)
    ))

    _M_Smarthome.TemperatureRange = TemperatureRange
    del TemperatureRange

_M_Smarthome._t_Fridge = IcePy.defineValue('::Smarthome::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.FridgePrx = Ice.createTempClass()
    class FridgePrx(_M_Smarthome.DevicePrx):

        def setTemperature(self, temperature, context=None):
            return _M_Smarthome.Fridge._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_Smarthome.Fridge._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Fridge._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_Smarthome.Fridge._op_setTemperature.end(self, _r)

        def getTemperature(self, context=None):
            return _M_Smarthome.Fridge._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_Smarthome.Fridge._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Fridge._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_Smarthome.Fridge._op_getTemperature.end(self, _r)

        def getTemperatureRange(self, context=None):
            return _M_Smarthome.Fridge._op_getTemperatureRange.invoke(self, ((), context))

        def getTemperatureRangeAsync(self, context=None):
            return _M_Smarthome.Fridge._op_getTemperatureRange.invokeAsync(self, ((), context))

        def begin_getTemperatureRange(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Fridge._op_getTemperatureRange.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperatureRange(self, _r):
            return _M_Smarthome.Fridge._op_getTemperatureRange.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.FridgePrx.ice_checkedCast(proxy, '::Smarthome::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Fridge'
    _M_Smarthome._t_FridgePrx = IcePy.defineProxy('::Smarthome::Fridge', FridgePrx)

    _M_Smarthome.FridgePrx = FridgePrx
    del FridgePrx

    _M_Smarthome.Fridge = Ice.createTempClass()
    class Fridge(_M_Smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::Fridge')

        def ice_id(self, current=None):
            return '::Smarthome::Fridge'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Fridge'

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def getTemperatureRange(self, current=None):
            raise NotImplementedError("servant method 'getTemperatureRange' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_FridgeDisp)

        __repr__ = __str__

    _M_Smarthome._t_FridgeDisp = IcePy.defineClass('::Smarthome::Fridge', Fridge, (), None, (_M_Smarthome._t_DeviceDisp,))
    Fridge._ice_type = _M_Smarthome._t_FridgeDisp

    Fridge._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_double, False, 0),), (), None, (_M_Smarthome._t_DevicesIsInStandbyMode, _M_Smarthome._t_InputTemperatureOutOfRange))
    Fridge._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode,))
    Fridge._op_getTemperatureRange = IcePy.Operation('getTemperatureRange', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_TemperatureRange, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode,))

    _M_Smarthome.Fridge = Fridge
    del Fridge

if '_t_ProductList' not in _M_Smarthome.__dict__:
    _M_Smarthome._t_ProductList = IcePy.defineSequence('::Smarthome::ProductList', (), _M_Smarthome._t_Product)

_M_Smarthome._t_FridgeWithProductsMonitoring = IcePy.defineValue('::Smarthome::FridgeWithProductsMonitoring', Ice.Value, -1, (), False, True, None, ())

if 'FridgeWithProductsMonitoringPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.FridgeWithProductsMonitoringPrx = Ice.createTempClass()
    class FridgeWithProductsMonitoringPrx(_M_Smarthome.FridgePrx):

        def getProducts(self, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProducts.invoke(self, ((), context))

        def getProductsAsync(self, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProducts.invokeAsync(self, ((), context))

        def begin_getProducts(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProducts.begin(self, ((), _response, _ex, _sent, context))

        def end_getProducts(self, _r):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProducts.end(self, _r)

        def getProduct(self, id, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProduct.invoke(self, ((id, ), context))

        def getProductAsync(self, id, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProduct.invokeAsync(self, ((id, ), context))

        def begin_getProduct(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProduct.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_getProduct(self, _r):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getProduct.end(self, _r)

        def getExpiredProducts(self, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getExpiredProducts.invoke(self, ((), context))

        def getExpiredProductsAsync(self, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getExpiredProducts.invokeAsync(self, ((), context))

        def begin_getExpiredProducts(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getExpiredProducts.begin(self, ((), _response, _ex, _sent, context))

        def end_getExpiredProducts(self, _r):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_getExpiredProducts.end(self, _r)

        def addProduct(self, product, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProduct.invoke(self, ((product, ), context))

        def addProductAsync(self, product, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProduct.invokeAsync(self, ((product, ), context))

        def begin_addProduct(self, product, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProduct.begin(self, ((product, ), _response, _ex, _sent, context))

        def end_addProduct(self, _r):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProduct.end(self, _r)

        def addProducts(self, products, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProducts.invoke(self, ((products, ), context))

        def addProductsAsync(self, products, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProducts.invokeAsync(self, ((products, ), context))

        def begin_addProducts(self, products, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProducts.begin(self, ((products, ), _response, _ex, _sent, context))

        def end_addProducts(self, _r):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_addProducts.end(self, _r)

        def removeProduct(self, productId, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_removeProduct.invoke(self, ((productId, ), context))

        def removeProductAsync(self, productId, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_removeProduct.invokeAsync(self, ((productId, ), context))

        def begin_removeProduct(self, productId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_removeProduct.begin(self, ((productId, ), _response, _ex, _sent, context))

        def end_removeProduct(self, _r):
            return _M_Smarthome.FridgeWithProductsMonitoring._op_removeProduct.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.FridgeWithProductsMonitoringPrx.ice_checkedCast(proxy, '::Smarthome::FridgeWithProductsMonitoring', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.FridgeWithProductsMonitoringPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::FridgeWithProductsMonitoring'
    _M_Smarthome._t_FridgeWithProductsMonitoringPrx = IcePy.defineProxy('::Smarthome::FridgeWithProductsMonitoring', FridgeWithProductsMonitoringPrx)

    _M_Smarthome.FridgeWithProductsMonitoringPrx = FridgeWithProductsMonitoringPrx
    del FridgeWithProductsMonitoringPrx

    _M_Smarthome.FridgeWithProductsMonitoring = Ice.createTempClass()
    class FridgeWithProductsMonitoring(_M_Smarthome.Fridge):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::Fridge', '::Smarthome::FridgeWithProductsMonitoring')

        def ice_id(self, current=None):
            return '::Smarthome::FridgeWithProductsMonitoring'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::FridgeWithProductsMonitoring'

        def getProducts(self, current=None):
            raise NotImplementedError("servant method 'getProducts' not implemented")

        def getProduct(self, id, current=None):
            raise NotImplementedError("servant method 'getProduct' not implemented")

        def getExpiredProducts(self, current=None):
            raise NotImplementedError("servant method 'getExpiredProducts' not implemented")

        def addProduct(self, product, current=None):
            raise NotImplementedError("servant method 'addProduct' not implemented")

        def addProducts(self, products, current=None):
            raise NotImplementedError("servant method 'addProducts' not implemented")

        def removeProduct(self, productId, current=None):
            raise NotImplementedError("servant method 'removeProduct' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_FridgeWithProductsMonitoringDisp)

        __repr__ = __str__

    _M_Smarthome._t_FridgeWithProductsMonitoringDisp = IcePy.defineClass('::Smarthome::FridgeWithProductsMonitoring', FridgeWithProductsMonitoring, (), None, (_M_Smarthome._t_FridgeDisp,))
    FridgeWithProductsMonitoring._ice_type = _M_Smarthome._t_FridgeWithProductsMonitoringDisp

    FridgeWithProductsMonitoring._op_getProducts = IcePy.Operation('getProducts', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_ProductList, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode,))
    FridgeWithProductsMonitoring._op_getProduct = IcePy.Operation('getProduct', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Smarthome._t_Product, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode, _M_Smarthome._t_ProductDoesNotExist))
    FridgeWithProductsMonitoring._op_getExpiredProducts = IcePy.Operation('getExpiredProducts', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_ProductList, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode,))
    FridgeWithProductsMonitoring._op_addProduct = IcePy.Operation('addProduct', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_Smarthome._t_Product, False, 0),), (), None, (_M_Smarthome._t_DevicesIsInStandbyMode, _M_Smarthome._t_InvalidDate))
    FridgeWithProductsMonitoring._op_addProducts = IcePy.Operation('addProducts', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_Smarthome._t_ProductList, False, 0),), (), None, (_M_Smarthome._t_DevicesIsInStandbyMode, _M_Smarthome._t_InvalidDate))
    FridgeWithProductsMonitoring._op_removeProduct = IcePy.Operation('removeProduct', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Smarthome._t_DevicesIsInStandbyMode, _M_Smarthome._t_ProductDoesNotExist))

    _M_Smarthome.FridgeWithProductsMonitoring = FridgeWithProductsMonitoring
    del FridgeWithProductsMonitoring

_M_Smarthome._t_FridgeWithIceMaker = IcePy.defineValue('::Smarthome::FridgeWithIceMaker', Ice.Value, -1, (), False, True, None, ())

if 'FridgeWithIceMakerPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.FridgeWithIceMakerPrx = Ice.createTempClass()
    class FridgeWithIceMakerPrx(_M_Smarthome.FridgePrx):

        def makeIce(self, weigth, context=None):
            return _M_Smarthome.FridgeWithIceMaker._op_makeIce.invoke(self, ((weigth, ), context))

        def makeIceAsync(self, weigth, context=None):
            return _M_Smarthome.FridgeWithIceMaker._op_makeIce.invokeAsync(self, ((weigth, ), context))

        def begin_makeIce(self, weigth, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.FridgeWithIceMaker._op_makeIce.begin(self, ((weigth, ), _response, _ex, _sent, context))

        def end_makeIce(self, _r):
            return _M_Smarthome.FridgeWithIceMaker._op_makeIce.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.FridgeWithIceMakerPrx.ice_checkedCast(proxy, '::Smarthome::FridgeWithIceMaker', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.FridgeWithIceMakerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::FridgeWithIceMaker'
    _M_Smarthome._t_FridgeWithIceMakerPrx = IcePy.defineProxy('::Smarthome::FridgeWithIceMaker', FridgeWithIceMakerPrx)

    _M_Smarthome.FridgeWithIceMakerPrx = FridgeWithIceMakerPrx
    del FridgeWithIceMakerPrx

    _M_Smarthome.FridgeWithIceMaker = Ice.createTempClass()
    class FridgeWithIceMaker(_M_Smarthome.Fridge):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::Fridge', '::Smarthome::FridgeWithIceMaker')

        def ice_id(self, current=None):
            return '::Smarthome::FridgeWithIceMaker'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::FridgeWithIceMaker'

        def makeIce(self, weigth, current=None):
            raise NotImplementedError("servant method 'makeIce' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_FridgeWithIceMakerDisp)

        __repr__ = __str__

    _M_Smarthome._t_FridgeWithIceMakerDisp = IcePy.defineClass('::Smarthome::FridgeWithIceMaker', FridgeWithIceMaker, (), None, (_M_Smarthome._t_FridgeDisp,))
    FridgeWithIceMaker._ice_type = _M_Smarthome._t_FridgeWithIceMakerDisp

    FridgeWithIceMaker._op_makeIce = IcePy.Operation('makeIce', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Smarthome._t_DevicesIsInStandbyMode,))

    _M_Smarthome.FridgeWithIceMaker = FridgeWithIceMaker
    del FridgeWithIceMaker

if 'Position' not in _M_Smarthome.__dict__:
    _M_Smarthome.Position = Ice.createTempClass()
    class Position(object):
        """
        MOWER
        """
        def __init__(self, x=0.0, y=0.0):
            self.x = x
            self.y = y

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Smarthome.Position):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_Position)

        __repr__ = __str__

    _M_Smarthome._t_Position = IcePy.defineStruct('::Smarthome::Position', Position, (), (
        ('x', (), IcePy._t_double),
        ('y', (), IcePy._t_double)
    ))

    _M_Smarthome.Position = Position
    del Position

if 'SpeedRange' not in _M_Smarthome.__dict__:
    _M_Smarthome.SpeedRange = Ice.createTempClass()
    class SpeedRange(object):
        def __init__(self, min=0, max=0):
            self.min = min
            self.max = max

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.min)
            _h = 5 * _h + Ice.getHash(self.max)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Smarthome.SpeedRange):
                return NotImplemented
            else:
                if self.min is None or other.min is None:
                    if self.min != other.min:
                        return (-1 if self.min is None else 1)
                else:
                    if self.min < other.min:
                        return -1
                    elif self.min > other.min:
                        return 1
                if self.max is None or other.max is None:
                    if self.max != other.max:
                        return (-1 if self.max is None else 1)
                else:
                    if self.max < other.max:
                        return -1
                    elif self.max > other.max:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_SpeedRange)

        __repr__ = __str__

    _M_Smarthome._t_SpeedRange = IcePy.defineStruct('::Smarthome::SpeedRange', SpeedRange, (), (
        ('min', (), IcePy._t_int),
        ('max', (), IcePy._t_int)
    ))

    _M_Smarthome.SpeedRange = SpeedRange
    del SpeedRange

_M_Smarthome._t_Mower = IcePy.defineValue('::Smarthome::Mower', Ice.Value, -1, (), False, True, None, ())

if 'MowerPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.MowerPrx = Ice.createTempClass()
    class MowerPrx(_M_Smarthome.DevicePrx):

        def getPosition(self, context=None):
            return _M_Smarthome.Mower._op_getPosition.invoke(self, ((), context))

        def getPositionAsync(self, context=None):
            return _M_Smarthome.Mower._op_getPosition.invokeAsync(self, ((), context))

        def begin_getPosition(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Mower._op_getPosition.begin(self, ((), _response, _ex, _sent, context))

        def end_getPosition(self, _r):
            return _M_Smarthome.Mower._op_getPosition.end(self, _r)

        def setSpeed(self, speed, context=None):
            return _M_Smarthome.Mower._op_setSpeed.invoke(self, ((speed, ), context))

        def setSpeedAsync(self, speed, context=None):
            return _M_Smarthome.Mower._op_setSpeed.invokeAsync(self, ((speed, ), context))

        def begin_setSpeed(self, speed, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Mower._op_setSpeed.begin(self, ((speed, ), _response, _ex, _sent, context))

        def end_setSpeed(self, _r):
            return _M_Smarthome.Mower._op_setSpeed.end(self, _r)

        def getSpeed(self, context=None):
            return _M_Smarthome.Mower._op_getSpeed.invoke(self, ((), context))

        def getSpeedAsync(self, context=None):
            return _M_Smarthome.Mower._op_getSpeed.invokeAsync(self, ((), context))

        def begin_getSpeed(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Mower._op_getSpeed.begin(self, ((), _response, _ex, _sent, context))

        def end_getSpeed(self, _r):
            return _M_Smarthome.Mower._op_getSpeed.end(self, _r)

        def getBatteryLevel(self, context=None):
            return _M_Smarthome.Mower._op_getBatteryLevel.invoke(self, ((), context))

        def getBatteryLevelAsync(self, context=None):
            return _M_Smarthome.Mower._op_getBatteryLevel.invokeAsync(self, ((), context))

        def begin_getBatteryLevel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Mower._op_getBatteryLevel.begin(self, ((), _response, _ex, _sent, context))

        def end_getBatteryLevel(self, _r):
            return _M_Smarthome.Mower._op_getBatteryLevel.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.MowerPrx.ice_checkedCast(proxy, '::Smarthome::Mower', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.MowerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Mower'
    _M_Smarthome._t_MowerPrx = IcePy.defineProxy('::Smarthome::Mower', MowerPrx)

    _M_Smarthome.MowerPrx = MowerPrx
    del MowerPrx

    _M_Smarthome.Mower = Ice.createTempClass()
    class Mower(_M_Smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::Mower')

        def ice_id(self, current=None):
            return '::Smarthome::Mower'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Mower'

        def getPosition(self, current=None):
            raise NotImplementedError("servant method 'getPosition' not implemented")

        def setSpeed(self, speed, current=None):
            raise NotImplementedError("servant method 'setSpeed' not implemented")

        def getSpeed(self, current=None):
            raise NotImplementedError("servant method 'getSpeed' not implemented")

        def getBatteryLevel(self, current=None):
            raise NotImplementedError("servant method 'getBatteryLevel' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_MowerDisp)

        __repr__ = __str__

    _M_Smarthome._t_MowerDisp = IcePy.defineClass('::Smarthome::Mower', Mower, (), None, (_M_Smarthome._t_DeviceDisp,))
    Mower._ice_type = _M_Smarthome._t_MowerDisp

    Mower._op_getPosition = IcePy.Operation('getPosition', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_Position, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode,))
    Mower._op_setSpeed = IcePy.Operation('setSpeed', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Smarthome._t_DevicesIsInStandbyMode, _M_Smarthome._t_InputSpeedOutOfRange, _M_Smarthome._t_BatteryLvlLow))
    Mower._op_getSpeed = IcePy.Operation('getSpeed', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode,))
    Mower._op_getBatteryLevel = IcePy.Operation('getBatteryLevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), (_M_Smarthome._t_DevicesIsInStandbyMode,))

    _M_Smarthome.Mower = Mower
    del Mower

# End of module Smarthome
